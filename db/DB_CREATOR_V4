/* All processes assume that the DB is created from scratch */

/* Import csv files to SQLite3 */
.mode csv

/* Tables are dropped if they exist */
DROP TABLE IF EXISTS Events_DIM;
CREATE TABLE Events_DIM(event_id INTEGER PRIMARY KEY,
                        event_name TEXT,
                        event_location TEXT,
                        event_country TEXT);
.import ../data/Events_DIM.csv Events_DIM


DROP TABLE IF EXISTS Player_DIM;
CREATE TABLE Player_DIM(player_id INTEGER PRIMARY KEY,
                        player_name TEXT);
.import ../data/Player_DIM.csv Player_DIM


DROP TABLE IF EXISTS Rounds_DIM;
CREATE TABLE Rounds_DIM(round_id INTEGER PRIMARY KEY,
                       round_name TEXT);
.import ../data/Rounds_DIM.csv Rounds_DIM


DROP TABLE IF EXISTS Picks_FACT;
CREATE TABLE Picks_FACT(picks_id INTEGER PRIMARY KEY,
                        player_id INTEGER,
                        year INTEGER,
                        stop_number INTEGER,
                        event_id INTEGER,
                        round_start_id INTEGER,
                        sex TEXT,
                        surfer_name TEXT);
.import ../data/Picks_FACT.csv Picks_FACT

/* EDIT 20170414 */
/* Created a Fantasy picks table for the final database */

DROP TABLE IF EXISTS FantasyPicks;
CREATE TABLE FantasyPicks(id, INTEGER PRIMARY KEY,
                        player_name TEXT,
                        year INTEGER,
                        stop_number INTEGER,
                        event_id INTEGER, 
                        event_name TEXT,
                        round_start_id INTEGER,
                        sex TEXT,
                        surfer_name TEXT);

INSERT INTO FantasyPicks
    (id, player_name, year, stop_number, event_id, event_name, round_start_id, sex, surfer_name)
    SELECT picks_id, 
       players.player_name,
       picks.year,
       picks.stop_number,
       events.event_id,
       events.event_name || ' - ' || events.event_location,
       picks.round_start_id,
       picks.sex,
       picks.surfer_name
    FROM Picks_FACT picks
    JOIN Player_DIM players
       ON players.player_id = picks.player_id
    JOIN Events_DIM events
       ON events.event_id = picks.event_id;


/* Create events fact table */

DROP TABLE IF EXISTS Events_FACT;
CREATE TABLE Events_FACT(id INTEGER PRIMARY KEY,
                    year INTEGER, /* added entry for future proofing tables */
                    stop_number INTEGER, /* added entry to remove dependence on event_id */
                    event_id INTEGER,
                    round_id INTEGER,
                    heat INTEGER,
                    sex TEXT,
                    surfer_name TEXT,
                    score1 REAL,
                    score2 REAL,
		    total REAL,
                    flag TEXT,
                    note TEXT);
.import ../data/Events_FACT.csv Events_FACT


/* Creating "VIEW" to handle mens bonus rounds */

DROP VIEW MensMaxBonusRound;
CREATE VIEW MensMaxBonusRound as
/* added year and stop_number */
SELECT year, stop_number, event_id, round_id, max(total) as high_score
FROM Events_FACT
WHERE round_id IN (2, 5) and sex='m'
/* added year and stop_number to grouping */
GROUP BY year, stop_number, event_id, round_id;

DROP VIEW MensSurferBonusRounds;
CREATE VIEW MensSurferBonusRounds as
SELECT sbr.year, /* added year and stop_number */
       sbr.stop_number,
       sbr.event_id,
       sbr.bonusRound,
       sbr.bonusflag,
       sbr.sex,
       sbr.surfer_name,
       mbr.high_score
FROM (SELECT year, /* added year and stop_number */
             stop_number,
             event_id,
             round_id,
             (round_id+1) as bonusRound,
             sex,
             surfer_name,
             'b' as bonusflag,
             max(total)
      FROM Events_FACT
      WHERE round_id IN (1, 4) and sex='m'
      /* added year and stop_number */
      GROUP BY year, stop_number, event_id, round_id, heat) sbr
LEFT JOIN MensMaxBonusRound mbr
ON sbr.stop_number=mbr.stop_number /* added year and stop_number */
AND sbr.year=mbr.year /* added year and stop_number */
AND sbr.event_id=mbr.event_id
AND sbr.bonusRound=mbr.round_id;


/* Creating "VIEW" to handle girls bonus rounds */

DROP VIEW GirlsMaxBonusRound;
CREATE VIEW GirlsMaxBonusRound as
/* same changes as men - adding year and stop number */
SELECT year, stop_number, event_id, round_id, max(total) as high_score
FROM Events_FACT
WHERE round_id IN (2, 4) and sex='f'
GROUP BY year, stop_number, event_id, round_id;

DROP VIEW GirlsSurferBonusRounds;
CREATE VIEW GirlsSurferBonusRounds as
SELECT sbr.year, /* added year and stop_number */
       sbr.stop_number,
       sbr.event_id,
       sbr.bonusRound,
       sbr.bonusflag,
       sbr.sex,
       sbr.surfer_name,
       mbr.high_score
FROM (SELECT year, /* added year and stop_number */
             stop_number,
             event_id,
             round_id,
             (round_id+1) as bonusRound,
             sex,
             surfer_name,
             'b' as bonusflag,
             max(total)
      FROM Events_FACT
      WHERE round_id IN (1, 3) and sex='f'
      GROUP BY year, stop_number, event_id, round_id, heat) sbr
LEFT JOIN GirlsMaxBonusRound mbr
ON sbr.stop_number=mbr.stop_number /* added year and stop_number */
AND sbr.year=mbr.year /* added year and stop_number */
AND sbr.event_id=mbr.event_id
AND sbr.bonusRound=mbr.round_id;



/* Generate points table for surfers (not players in fantasy team)
   This operation is merging data by appending bonus round points
   to the original data. */

/* EDIT 2017-04-12 - added bonusflags */

DROP TABLE IF EXISTS FantasyPointsTable;
CREATE TABLE FantasyPointsTable (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    year INTEGER, /* added year and stop_number */
                    stop_number INTEGER,
                    event_id INTEGER,
                    round_id INTEGER,
                    bonusflag TEXT,
                    sex TEXT,
                    surfer_name TEXT,
                    total REAL);

/* added year and stop_number */
INSERT INTO FantasyPointsTable
    (year, stop_number, event_id, round_id, bonusflag, sex, surfer_name, total)
    SELECT year, stop_number, event_id, bonusRound, bonusflag, sex, surfer_name, high_score
    FROM MensSurferBonusRounds;

/* added year and stop_number */
INSERT INTO FantasyPointsTable
    (year, stop_number, event_id, round_id, bonusflag, sex, surfer_name, total)
    SELECT year, stop_number, event_id, bonusRound, bonusflag, sex, surfer_name, high_score
    FROM GirlsSurferBonusRounds;

/* added year and stop_number */
INSERT INTO FantasyPointsTable
    (year, stop_number, event_id, round_id, bonusflag, sex, surfer_name, total)
    SELECT year, stop_number, event_id, round_id, '', sex, surfer_name, total
    FROM Events_FACT;


/* Merge data together to find the total points that each
   fantasy league player earned based on their picks */

DROP TABLE IF EXISTS FantasyPlayerScore;
CREATE TABLE FantasyPlayerScore (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    year INTEGER,
                    stop_number INTEGER,
                    event_id INTEGER,
                    sex TEXT,
                    player_name TEXT,
                    player_points REAL);


/* added round_id join to round_start_id to keep only the
rounds that the player gets points for. This is important
for players that pick surfers late. */

/* Note that the current method of dropping points prior 
to the late picks is only removing surfers that get out 
before the start_round id */

/* added year and stop number */
INSERT INTO FantasyPlayerScore
     (year, stop_number, event_id, sex, player_name, player_points)
	SELECT fpt.year, fpt.stop_number, fpt.event_id, fpt.sex, pd.player_name, sum(fpt.total) as tot
	FROM FantasyPointsTable fpt
	JOIN Picks_FACT pf
	  ON fpt.surfer_name = pf.surfer_name
          AND fpt.year = pf.year /* added year and stop number */
          AND fpt.stop_number = pf.stop_number /* added year and stop number */
	  AND fpt.event_id = pf.event_id
	  AND fpt.round_id >= pf.round_start_id
	  AND fpt.sex = pf.sex
	JOIN Player_DIM pd
	  ON pf.player_id = pd.player_id
	GROUP BY fpt.year, fpt.stop_number, fpt.event_id, fpt.sex, pd.player_name;



/* LEGACY CODE */
/* INSERT INTO FantasyPlayerScore
     (event_id, sex, player_name, player_points)
     SELECT fpt.event_id, fpt.sex, pd.player_name, fpt.surfer_name, sum(fpt.tot)
          FROM(
               SELECT event_id, sex, round_id, sum(total) as tot
               FROM FantasyPointsTable
               GROUP BY event_id, surfer_name) fpt
     JOIN Picks_FACT pf
          ON fpt.surfer_name = pf.surfer_name
          AND fpt.event_id = pf.event_id
          AND fpt.round_id >= pf.round_start_id
          AND fpt.sex = pf.sex
     JOIN Player_DIM pd
          ON pf.player_id = pd.player_id
     GROUP BY fpt.event_id, fpt.sex, pd.player_name;*/



/* 2017-04-11 */
/* Added running totals for each player across events */
/* Added player rank */

DROP VIEW FantasyPlayerRunningTotals;
CREATE VIEW FantasyPlayerRunningTotals AS
/* added year and stop number */
/* In this query event_id is replaced by stop_number */
/* And year has been included to match tables correctly */
SELECT t1.id, t1.year, t1.stop_number, t1.event_id, t1.sex, t1.player_name, t1.player_points,
     (
     SELECT SUM(t2.player_points)
     FROM FantasyPlayerScore t2
     WHERE t2.stop_number <= t1.stop_number
     AND t2.year = t1.year
     AND t2.sex = t1.sex
     AND t2.player_name = t1.player_name
     ) as accumulated
FROM FantasyPlayerScore t1;

DROP VIEW IF EXISTS FantasyPlayerRanking;
CREATE VIEW FantasyPlayerRanking AS
SELECT  p1.*, (
        SELECT COUNT(*)+1
        FROM FantasyPlayerRunningTotals as p2
        WHERE p2.player_points > p1.player_points
        AND p2.sex = p1.sex
        AND p2.year = p1.year
        AND p2.stop_number = p1.stop_number
        ) as eventrank,
        (
        SELECT COUNT(*)+1
        FROM FantasyPlayerRunningTotals as p2
        WHERE p2.accumulated > p1.accumulated
        AND p2.sex = p1.sex
        AND p2.year = p1.year
        AND p2.stop_number = p1.stop_number
        ) as tourrank
FROM    FantasyPlayerRunningTotals as p1
ORDER BY p1.year, p1.stop_number, tourrank;


/* 2017-04-11 */
/* The next step has full focus on determining rank change
   for each player relative their last ranked position */

DROP VIEW IF EXISTS FantasyPlayerStatus;
CREATE VIEW FantasyPlayerStatus AS
SELECT p1.*, (tourrank - (
   SELECT tourrank
   FROM FantasyPlayerRanking as p2
   WHERE p2.stop_number = p1.stop_number-1 /*stop number replaced event_id*/
   AND p2.year = p1.year /* included year for future proofing */
   AND p2.player_name = p1.player_name
   AND p2.sex = p1.sex   
   )) * -1 as rankchange
FROM FantasyPlayerRanking as p1;

/* 2017-04-12 */
/* Determine the total required points to reach the no 1. pos */

DROP TABLE IF EXISTS FantasyLeaderBoard;
CREATE TABLE FantasyLeaderBoard AS
SELECT p1.*, ROUND((
    SELECT MAX(accumulated)
    FROM FantasyPlayerStatus as p2
    WHERE p2.stop_number = p1.stop_number /* stop number replaced event_id */
    AND p2.year = p1.year
    AND p2.sex = p1.sex      
    GROUP BY stop_number
    ) - p1.accumulated, 2) as requiredpoints
FROM FantasyPlayerStatus as p1;


UPDATE fantasyleaderboard
SET rankchange = 0
WHERE rankchange IS NULL;
select * from fantasyleaderboard;

/* 2017-04-12 */
/* drop intermediate steps */
DROP TABLE Events_DIM;
DROP TABLE Player_DIM;
DROP TABLE Rounds_DIM;
DROP TABLE Picks_FACT;

DROP VIEW GirlsMaxBonusRound;
DROP VIEW GirlsSurferBonusRounds;
DROP VIEW MensMaxBonusRound;
DROP VIEW MensSurferBonusRounds;
DROP TABLE FantasyPlayerScore;
DROP VIEW FantasyPlayerRunningTotals;
DROP VIEW FantasyPlayerRanking;
DROP VIEW FantasyPlayerStatus;




/* EXTRAS */
/* 2017-05-12 - calculate ranks for next event*/
.mode csv
DROP TABLE IF EXISTS TourPoints_DIM;
CREATE TABLE TourPoints_DIM(tourpoints_id INTEGER PRIMARY KEY,
                        tourpoints_finish INTEGER,
                        tourpoints_points INTEGER,
                        tourpoints_round INTEGER,
                        tourpoints_sex TEXT);
.import ../data/TourPoints_DIM.csv TourPoints_DIM

/* total tour points rank current year */
/* There are four sections A-D */

/* A. THIS SECTION HANDLES THE SURFERS THAT MAKE 
IT TO THE FINAL ONLY - APPENDS TO THE NEXT QUERY*/
DROP VIEW IF EXISTS totaltourpoints;
CREATE VIEW totaltourpoints as
SELECT R1.surfer_name,
       R1.year,
       R1.stop_number,
       R1.sex,
       R1.event_id,
       R1.total,
       R1.rid, 
       tp.tourpoints_points
FROM (
      SELECT surfer_name,
             year,
             stop_number,
             sex,
             event_id,
             total,
             max(round_id) as rid, /*max round id pulls out the finalists*/
             rank
      FROM (
            SELECT  p1.*, (
                  SELECT COUNT(*)+1
                  FROM events_fact as ef
                  WHERE ef.total > p1.total
                  AND ef.sex = p1.sex
                  AND ef.year = p1.year
                  AND ef.stop_number = p1.stop_number
                  AND ef.event_id = p1.event_id
                  AND ef.round_id = p1.round_id
                  AND ef.heat = p1.heat
                  ) as rank
            FROM events_fact as p1
      )
     GROUP BY surfer_name, year, stop_number, event_id) as R1
JOIN TourPoints_DIM tp
ON tp.tourpoints_round = R1.rid
AND tp.tourpoints_finish = R1.rank
AND tp.tourpoints_sex = R1.sex

UNION

/* B. Males not making the final */
SELECT ef.*, tp.tourpoints_points 
FROM (
      SELECT surfer_name,
          year,
          stop_number,
          sex,
          event_id,
          total,
          max(round_id) as rid
      FROM events_fact ef
      GROUP BY surfer_name, year, stop_number, event_id 
      HAVING sex='m' AND rid < 8) as ef
JOIN TourPoints_DIM tp
ON tp.tourpoints_round = ef.rid
AND tp.tourpoints_sex = ef.sex

UNION

/* C. Females not making the final */
SELECT ef.*, tp.tourpoints_points 
FROM (SELECT surfer_name,
       year,
       stop_number,
       sex,
       event_id,
       total,
       max(round_id) as rid
FROM events_fact ef
GROUP BY surfer_name, year, stop_number, event_id
HAVING sex='f' AND rid < 7) as ef
JOIN TourPoints_DIM tp
ON tp.tourpoints_round = ef.rid
AND tp.tourpoints_sex = ef.sex;



/* CREATE POINTS/RANKING TABLE */
DROP TABLE IF EXISTS pointsspread;
CREATE TABLE pointsspread(id INTEGER PRIMARY KEY AUTOINCREMENT,
                        year INTEGER,
                        stop_number INTEGER,
                        surfer_name TEXT,
                        sex TEXT,
                        event_id INTEGER,
                        tourpoints INTEGER,
                        fantasypoints REAL,
                        lasteventfantasypoints REAL,
                        tourmaxheatscore REAL,
                        lasteventmaxheatscore REAL,
                        results REAL
                        );


/* INSERT THE RANKINGS DATA */
INSERT INTO pointsspread
     (year, stop_number, surfer_name, sex, event_id, tourpoints, fantasypoints,
      lasteventfantasypoints,tourmaxheatscore,
      lasteventmaxheatscore, results)

/* SELECT QUERY TO CREATE RANKINGS TABLE */ 
SELECT p1.year, p1.stop_number, p1.surfer_name, p1.sex, p1.event_id, p1.tourpoints, p2.tourfantasypoints, p3.lasteventfantasypoints, p4.tourmaxheatscore, p5.lasteventmaxheatscore, p6.results
FROM (

/* Get tour points for all events prior to 
the one of interest */
SELECT  DISTINCT(p1.surfer_name), p1.year, p1.stop_number, p1.sex, p1.event_id, 
        (SELECT sum(tourpoints_points)
        FROM totaltourpoints as ttp
        WHERE ttp.stop_number < p1.stop_number
        AND ttp.year = p1.year
        AND ttp.sex = p1.sex
        AND ttp.surfer_name = p1.surfer_name
        ) as tourpoints
      FROM events_fact as p1 

) AS p1

/* join */
LEFT JOIN (

/* Get the sum of fantasy points for all events prior to 
the one of interest */
SELECT  DISTINCT(p2.surfer_name), p2.year, p2.stop_number, 
        (SELECT sum(total)
        FROM fantasypointstable as fpt
        WHERE fpt.stop_number < p2.stop_number
        AND fpt.year = p2.year
        AND fpt.sex = p2.sex
        AND fpt.surfer_name = p2.surfer_name
        ) as tourfantasypoints
      FROM events_fact as p2 

) AS p2

/* Join condition */
ON p1.surfer_name = p2.surfer_name
AND p1.year = p2.year
AND p1.stop_number = p2.stop_number

/* join */
LEFT JOIN (

/* Get the fantasy points for the last event */
SELECT  DISTINCT(p1.surfer_name), p1.year, p1.stop_number, 
        (SELECT sum(total)
        FROM fantasypointstable as fpt
        WHERE fpt.stop_number = p1.stop_number-1
        AND fpt.sex = p1.sex
        AND fpt.surfer_name = p1.surfer_name
        ) as lasteventfantasypoints
      FROM events_fact as p1 

) AS p3

/* Join condition */
ON p1.surfer_name = p3.surfer_name
AND p1.year = p3.year
AND p1.stop_number = p3.stop_number

/* join */
LEFT JOIN (

/* Get max heat score so far in the current 
year */
SELECT  DISTINCT(p1.surfer_name), p1.year, p1.stop_number, 
        (SELECT max(total)
         FROM events_fact as ef
         WHERE ef.stop_number < p1.stop_number
         AND ef.year = p1.year
         AND ef.sex = p1.sex
         AND ef.surfer_name = p1.surfer_name
         ) as tourmaxheatscore
      FROM events_fact as p1 

) AS p4

/* Join condition */
ON p1.surfer_name = p4.surfer_name
AND p1.year = p4.year
AND p1.stop_number = p4.stop_number

/* join */
LEFT JOIN (

/* Get max heat score from last event */
SELECT  DISTINCT(p1.surfer_name), p1.year, p1.stop_number, 
        (SELECT max(total)
        FROM events_fact as ef
        WHERE ef.stop_number = p1.stop_number-1
        AND ef.year = p1.year
        AND ef.sex = p1.sex
        AND ef.surfer_name = p1.surfer_name
        ) as lasteventmaxheatscore
      FROM events_fact as p1 

) AS p5

/* Join condition */
ON p1.surfer_name = p5.surfer_name
AND p1.year = p5.year
AND p1.stop_number = p5.stop_number

/* join */
LEFT JOIN (

/* Current results */
SELECT  surfer_name, year, stop_number, sum(total) as results
        FROM fantasypointstable 
        GROUP BY surfer_name, year, stop_number
) AS p6

/* Join condition */
ON p1.surfer_name = p6.surfer_name
AND p1.year = p6.year
AND p1.stop_number = p6.stop_number;


/* Drops */
DROP TABLE Events_FACT;
DROP TABLE TourPoints_DIM;
DROP VIEW IF EXISTS totaltourpoints;
